; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?Clone@CMemoryStream@@UEAAJPEAPEAUIStream@@@Z	; CMemoryStream::Clone
PUBLIC	?Stat@CMemoryStream@@UEAAJPEAUtagSTATSTG@@K@Z	; CMemoryStream::Stat
PUBLIC	?UnlockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z ; CMemoryStream::UnlockRegion
PUBLIC	?LockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z ; CMemoryStream::LockRegion
PUBLIC	?Revert@CMemoryStream@@UEAAJXZ			; CMemoryStream::Revert
PUBLIC	?Commit@CMemoryStream@@UEAAJK@Z			; CMemoryStream::Commit
PUBLIC	?CopyTo@CMemoryStream@@UEAAJPEAUIStream@@T_ULARGE_INTEGER@@PEAT3@2@Z ; CMemoryStream::CopyTo
PUBLIC	?SetSize@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@@Z ; CMemoryStream::SetSize
PUBLIC	?Seek@CMemoryStream@@UEAAJT_LARGE_INTEGER@@KPEAT_ULARGE_INTEGER@@@Z ; CMemoryStream::Seek
PUBLIC	?Write@CMemoryStream@@UEAAJPEBXKPEAK@Z		; CMemoryStream::Write
PUBLIC	?Read@CMemoryStream@@UEAAJPEAXKPEAK@Z		; CMemoryStream::Read
PUBLIC	?Release@CMemoryStream@@UEAAKXZ			; CMemoryStream::Release
PUBLIC	?AddRef@CMemoryStream@@UEAAKXZ			; CMemoryStream::AddRef
PUBLIC	?QueryInterface@CMemoryStream@@UEAAJAEBU_GUID@@PEAPEAX@Z ; CMemoryStream::QueryInterface
PUBLIC	??0ISequentialStream@@QEAA@XZ			; ISequentialStream::ISequentialStream
PUBLIC	??0IStream@@QEAA@XZ				; IStream::IStream
PUBLIC	??_GCMemoryStream@@QEAAPEAXI@Z			; CMemoryStream::`scalar deleting destructor'
PUBLIC	??_C@_0BN@EKGPPBNC@CMemoryStream?3?3CMemoryStream?$AA@ ; `string'
PUBLIC	??_C@_0L@NADMDDIC@m_nSize?$DN?$CFd?$AA@		; `string'
PUBLIC	??_C@_09HLKNMNGG@leave?3?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BO@BLCPLGCK@CMemoryStream?3?3QueryInterface?$AA@ ; `string'
PUBLIC	??_C@_02KPKOKMHB@?$CFS?$AA@			; `string'
PUBLIC	??_C@_0BG@BOODOFLM@CMemoryStream?3?3AddRef?$AA@	; `string'
PUBLIC	??_C@_0BH@OENNKOOL@CMemoryStream?3?3Release?$AA@ ; `string'
PUBLIC	??_C@_0BF@MBAOGBMA@CMemoryStream?3?3Clone?$AA@	; `string'
PUBLIC	??_C@_0BG@DHANAHGH@CMemoryStream?3?3Commit?$AA@	; `string'
PUBLIC	??_C@_0BG@PFIDCJMF@CMemoryStream?3?3CopyTo?$AA@	; `string'
PUBLIC	??_C@_0BK@IENPNNNI@CMemoryStream?3?3LockRegion?$AA@ ; `string'
PUBLIC	??_C@_0BE@ICFNMKNB@CMemoryStream?3?3Read?$AA@	; `string'
PUBLIC	??_C@_0CE@ONHGLDBO@pv?$DN?$CFp?0?5cb?$DN?$CFu?0?5pcbRead?$DN?$CFp?0?5m_nPos@ ; `string'
PUBLIC	??_C@_09JLFOAJE@m_nPos?$DN?$CFd?$AA@		; `string'
PUBLIC	??_C@_0BF@LCEDHBNE@CMemoryStream?3?3Write?$AA@	; `string'
PUBLIC	??_C@_0BM@MAOALDNC@pv?$DN?$CFp?0?5cb?$DN?$CFu?0?5pcbWritten?$DN?$CFp?$AA@ ; `string'
PUBLIC	??_C@_0BG@JFMIHBJG@CMemoryStream?3?3Revert?$AA@	; `string'
PUBLIC	??_C@_0BE@DPKMFHHC@CMemoryStream?3?3Seek?$AA@	; `string'
PUBLIC	??_C@_0BK@DCPIPCHL@dlibMove?$DN?$CFLd?0?5dwOrigin?$DN?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0L@MMNDGIK@nMove?5?$DN?5?$CFd?$AA@	; `string'
PUBLIC	??_C@_0BE@BNFKMBMK@CMemoryStream?3?3Stat?$AA@	; `string'
PUBLIC	??_C@_0P@OHKBCDAN@grfStatFlag?$DN?$CFu?$AA@	; `string'
PUBLIC	??_C@_15HCGDGKEF@?$AA?$CF?$AAp?$AA?$AA@		; `string'
PUBLIC	??_7CMemoryStream@@6B@				; CMemoryStream::`vftable'
EXTRN	IID_IStream:BYTE
EXTRN	__imp_GetSystemTime:PROC
EXTRN	__imp_SystemTimeToFileTime:PROC
EXTRN	wcscpy_s:PROC
EXTRN	__imp_wsprintfW:PROC
EXTRN	GUID_NULL:BYTE
EXTRN	__imp_CoTaskMemAlloc:PROC
;	COMDAT ??_7CMemoryStream@@6B@
CONST	SEGMENT
??_7CMemoryStream@@6B@ DQ FLAT:?QueryInterface@CMemoryStream@@UEAAJAEBU_GUID@@PEAPEAX@Z ; CMemoryStream::`vftable'
	DQ	FLAT:?AddRef@CMemoryStream@@UEAAKXZ
	DQ	FLAT:?Release@CMemoryStream@@UEAAKXZ
	DQ	FLAT:?Read@CMemoryStream@@UEAAJPEAXKPEAK@Z
	DQ	FLAT:?Write@CMemoryStream@@UEAAJPEBXKPEAK@Z
	DQ	FLAT:?Seek@CMemoryStream@@UEAAJT_LARGE_INTEGER@@KPEAT_ULARGE_INTEGER@@@Z
	DQ	FLAT:?SetSize@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@@Z
	DQ	FLAT:?CopyTo@CMemoryStream@@UEAAJPEAUIStream@@T_ULARGE_INTEGER@@PEAT3@2@Z
	DQ	FLAT:?Commit@CMemoryStream@@UEAAJK@Z
	DQ	FLAT:?Revert@CMemoryStream@@UEAAJXZ
	DQ	FLAT:?LockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z
	DQ	FLAT:?UnlockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z
	DQ	FLAT:?Stat@CMemoryStream@@UEAAJPEAUtagSTATSTG@@K@Z
	DQ	FLAT:?Clone@CMemoryStream@@UEAAJPEAPEAUIStream@@@Z
CONST	ENDS
;	COMDAT ??_C@_15HCGDGKEF@?$AA?$CF?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_15HCGDGKEF@?$AA?$CF?$AAp?$AA?$AA@ DB '%', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OHKBCDAN@grfStatFlag?$DN?$CFu?$AA@
CONST	SEGMENT
??_C@_0P@OHKBCDAN@grfStatFlag?$DN?$CFu?$AA@ DB 'grfStatFlag=%u', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BNFKMBMK@CMemoryStream?3?3Stat?$AA@
CONST	SEGMENT
??_C@_0BE@BNFKMBMK@CMemoryStream?3?3Stat?$AA@ DB 'CMemoryStream::Stat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MMNDGIK@nMove?5?$DN?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0L@MMNDGIK@nMove?5?$DN?5?$CFd?$AA@ DB 'nMove = %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DCPIPCHL@dlibMove?$DN?$CFLd?0?5dwOrigin?$DN?$CFd?$AA@
CONST	SEGMENT
??_C@_0BK@DCPIPCHL@dlibMove?$DN?$CFLd?0?5dwOrigin?$DN?$CFd?$AA@ DB 'dlibM'
	DB	'ove=%Ld, dwOrigin=%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DPKMFHHC@CMemoryStream?3?3Seek?$AA@
CONST	SEGMENT
??_C@_0BE@DPKMFHHC@CMemoryStream?3?3Seek?$AA@ DB 'CMemoryStream::Seek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JFMIHBJG@CMemoryStream?3?3Revert?$AA@
CONST	SEGMENT
??_C@_0BG@JFMIHBJG@CMemoryStream?3?3Revert?$AA@ DB 'CMemoryStream::Revert'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MAOALDNC@pv?$DN?$CFp?0?5cb?$DN?$CFu?0?5pcbWritten?$DN?$CFp?$AA@
CONST	SEGMENT
??_C@_0BM@MAOALDNC@pv?$DN?$CFp?0?5cb?$DN?$CFu?0?5pcbWritten?$DN?$CFp?$AA@ DB 'p'
	DB	'v=%p, cb=%u, pcbWritten=%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LCEDHBNE@CMemoryStream?3?3Write?$AA@
CONST	SEGMENT
??_C@_0BF@LCEDHBNE@CMemoryStream?3?3Write?$AA@ DB 'CMemoryStream::Write', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLFOAJE@m_nPos?$DN?$CFd?$AA@
CONST	SEGMENT
??_C@_09JLFOAJE@m_nPos?$DN?$CFd?$AA@ DB 'm_nPos=%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ONHGLDBO@pv?$DN?$CFp?0?5cb?$DN?$CFu?0?5pcbRead?$DN?$CFp?0?5m_nPos@
CONST	SEGMENT
??_C@_0CE@ONHGLDBO@pv?$DN?$CFp?0?5cb?$DN?$CFu?0?5pcbRead?$DN?$CFp?0?5m_nPos@ DB 'p'
	DB	'v=%p, cb=%u, pcbRead=%p, m_nPos=%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ICFNMKNB@CMemoryStream?3?3Read?$AA@
CONST	SEGMENT
??_C@_0BE@ICFNMKNB@CMemoryStream?3?3Read?$AA@ DB 'CMemoryStream::Read', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IENPNNNI@CMemoryStream?3?3LockRegion?$AA@
CONST	SEGMENT
??_C@_0BK@IENPNNNI@CMemoryStream?3?3LockRegion?$AA@ DB 'CMemoryStream::Lo'
	DB	'ckRegion', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PFIDCJMF@CMemoryStream?3?3CopyTo?$AA@
CONST	SEGMENT
??_C@_0BG@PFIDCJMF@CMemoryStream?3?3CopyTo?$AA@ DB 'CMemoryStream::CopyTo'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DHANAHGH@CMemoryStream?3?3Commit?$AA@
CONST	SEGMENT
??_C@_0BG@DHANAHGH@CMemoryStream?3?3Commit?$AA@ DB 'CMemoryStream::Commit'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MBAOGBMA@CMemoryStream?3?3Clone?$AA@
CONST	SEGMENT
??_C@_0BF@MBAOGBMA@CMemoryStream?3?3Clone?$AA@ DB 'CMemoryStream::Clone', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OENNKOOL@CMemoryStream?3?3Release?$AA@
CONST	SEGMENT
??_C@_0BH@OENNKOOL@CMemoryStream?3?3Release?$AA@ DB 'CMemoryStream::Relea'
	DB	'se', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BOODOFLM@CMemoryStream?3?3AddRef?$AA@
CONST	SEGMENT
??_C@_0BG@BOODOFLM@CMemoryStream?3?3AddRef?$AA@ DB 'CMemoryStream::AddRef'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02KPKOKMHB@?$CFS?$AA@
CONST	SEGMENT
??_C@_02KPKOKMHB@?$CFS?$AA@ DB '%S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BLCPLGCK@CMemoryStream?3?3QueryInterface?$AA@
CONST	SEGMENT
??_C@_0BO@BLCPLGCK@CMemoryStream?3?3QueryInterface?$AA@ DB 'CMemoryStream'
	DB	'::QueryInterface', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HLKNMNGG@leave?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_09HLKNMNGG@leave?3?5?$CFs?$AA@ DB 'leave: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NADMDDIC@m_nSize?$DN?$CFd?$AA@
CONST	SEGMENT
??_C@_0L@NADMDDIC@m_nSize?$DN?$CFd?$AA@ DB 'm_nSize=%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EKGPPBNC@CMemoryStream?3?3CMemoryStream?$AA@
CONST	SEGMENT
??_C@_0BN@EKGPPBNC@CMemoryStream?3?3CMemoryStream?$AA@ DB 'CMemoryStream:'
	DB	':CMemoryStream', 00H			; `string'
; Function compile flags: /Ogspy
; File e:\my_project\openpdn\openpdn-e28f1ff0077e\src\shellextension\memorystream.cpp
;	COMDAT ?UnlockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z
_TEXT	SEGMENT
this$ = 8
libOffset$ = 16
cb$ = 24
dwLockType$ = 32
?UnlockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z PROC ; CMemoryStream::UnlockRegion, COMDAT

; 366  :     return E_NOTIMPL;

  00000	b8 01 40 00 80	 mov	 eax, -2147467263	; ffffffff80004001H

; 367  : }                                        

  00005	c3		 ret	 0
?UnlockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z ENDP ; CMemoryStream::UnlockRegion
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Stat@CMemoryStream@@UEAAJPEAUtagSTATSTG@@K@Z DD imagerel $LN7
	DD	imagerel $LN7+255
	DD	imagerel $unwind$?Stat@CMemoryStream@@UEAAJPEAUtagSTATSTG@@K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Stat@CMemoryStream@@UEAAJPEAUtagSTATSTG@@K@Z DD 072419H
	DD	01b6412H
	DD	01a3412H
	DD	0160112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT ?Stat@CMemoryStream@@UEAAJPEAUtagSTATSTG@@K@Z
_TEXT	SEGMENT
wszName$80587 = 32
__$ArrayPad$ = 160
this$ = 192
pstatstg$ = 200
grfStatFlag$ = 208
?Stat@CMemoryStream@@UEAAJPEAUtagSTATSTG@@K@Z PROC	; CMemoryStream::Stat, COMDAT

; 327  : {

$LN7:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00024	41 8b f8	 mov	 edi, r8d
  00027	48 8b da	 mov	 rbx, rdx
  0002a	48 8b f1	 mov	 rsi, rcx

; 328  :     TraceEnter();
; 329  : 
; 330  :     TraceOut("grfStatFlag=%u", grfStatFlag);
; 331  : 
; 332  :     if (NULL == pstatstg)

  0002d	48 85 d2	 test	 rdx, rdx
  00030	75 0a		 jne	 SHORT $LN2@Stat

; 333  :     {
; 334  :         return STG_E_INVALIDPOINTER;

  00032	b8 09 00 03 80	 mov	 eax, -2147287031	; ffffffff80030009H
  00037	e9 9e 00 00 00	 jmp	 $LN5@Stat
$LN2@Stat:

; 335  :     }
; 336  : 
; 337  :     ZeroMemory(pstatstg, sizeof(*pstatstg));

  0003c	33 d2		 xor	 edx, edx
  0003e	48 8b cb	 mov	 rcx, rbx
  00041	44 8d 42 50	 lea	 r8d, QWORD PTR [rdx+80]
  00045	e8 00 00 00 00	 call	 memset

; 338  : 
; 339  :     if (grfStatFlag != STATFLAG_NONAME)

  0004a	83 ff 01	 cmp	 edi, 1
  0004d	74 45		 je	 SHORT $LN1@Stat

; 340  :     {
; 341  :         WCHAR wszName[64];
; 342  :         wsprintfW(wszName, L"%p", m_pbBuffer);

  0004f	4c 8b 46 10	 mov	 r8, QWORD PTR [rsi+16]
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_15HCGDGKEF@?$AA?$CF?$AAp?$AA?$AA@
  0005a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR wszName$80587[rsp]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wsprintfW

; 343  : 		size_t nSize = 1 + wcslen(wszName);

  00065	48 83 c9 ff	 or	 rcx, -1
  00069	33 c0		 xor	 eax, eax
  0006b	48 8d 7c 24 20	 lea	 rdi, QWORD PTR wszName$80587[rsp]
  00070	66 f2 af	 repne scasw
  00073	48 f7 d1	 not	 rcx
  00076	48 8d 79 ff	 lea	 rdi, QWORD PTR [rcx-1]

; 344  :         pstatstg->pwcsName = (LPOLESTR)CoTaskMemAlloc(nSize);

  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoTaskMemAlloc

; 345  :         wcscpy_s(pstatstg->pwcsName, nSize, wszName);

  00080	4c 8d 44 24 20	 lea	 r8, QWORD PTR wszName$80587[rsp]
  00085	48 8d 57 01	 lea	 rdx, QWORD PTR [rdi+1]
  00089	48 8b c8	 mov	 rcx, rax
  0008c	48 89 03	 mov	 QWORD PTR [rbx], rax
  0008f	e8 00 00 00 00	 call	 wcscpy_s
$LN1@Stat:

; 346  :     }
; 347  : 
; 348  :     pstatstg->cbSize.QuadPart = (ULONGLONG)m_nSize;

  00094	48 63 46 18	 movsxd	 rax, DWORD PTR [rsi+24]

; 349  :     pstatstg->type = STGTY_STREAM;

  00098	c7 43 08 02 00
	00 00		 mov	 DWORD PTR [rbx+8], 2
  0009f	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 350  :     pstatstg->ctime = m_ftCreation;

  000a3	48 8b 46 20	 mov	 rax, QWORD PTR [rsi+32]
  000a7	48 89 43 20	 mov	 QWORD PTR [rbx+32], rax

; 351  :     pstatstg->mtime = m_ftModified;

  000ab	48 8b 46 28	 mov	 rax, QWORD PTR [rsi+40]
  000af	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax

; 352  :     pstatstg->atime = m_ftAccessed;

  000b3	48 8b 46 30	 mov	 rax, QWORD PTR [rsi+48]

; 353  :     pstatstg->grfMode = STGM_READ;

  000b7	83 63 30 00	 and	 DWORD PTR [rbx+48], 0

; 354  :     pstatstg->grfLocksSupported = 0;

  000bb	83 63 34 00	 and	 DWORD PTR [rbx+52], 0
  000bf	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax

; 355  :     pstatstg->clsid = CLSID_NULL;

  000c3	f3 0f 6f 05 00
	00 00 00	 movdqu	 xmm0, XMMWORD PTR GUID_NULL

; 356  :     pstatstg->grfStateBits = 0;

  000cb	83 63 48 00	 and	 DWORD PTR [rbx+72], 0

; 357  :     pstatstg->reserved = 0;

  000cf	83 63 4c 00	 and	 DWORD PTR [rbx+76], 0
  000d3	f3 0f 7f 43 38	 movdqu	 XMMWORD PTR [rbx+56], xmm0

; 358  : 
; 359  :     return S_OK;

  000d8	33 c0		 xor	 eax, eax
$LN5@Stat:

; 360  : }

  000da	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e2	48 33 cc	 xor	 rcx, rsp
  000e5	e8 00 00 00 00	 call	 __security_check_cookie
  000ea	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  000f2	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  000f6	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  000fa	49 8b e3	 mov	 rsp, r11
  000fd	5f		 pop	 rdi
  000fe	c3		 ret	 0
?Stat@CMemoryStream@@UEAAJPEAUtagSTATSTG@@K@Z ENDP	; CMemoryStream::Stat
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ?SetSize@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
this$ = 8
libNewSize$ = 16
?SetSize@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@@Z PROC	; CMemoryStream::SetSize, COMDAT

; 322  :     return E_NOTIMPL;

  00000	b8 01 40 00 80	 mov	 eax, -2147467263	; ffffffff80004001H

; 323  : }

  00005	c3		 ret	 0
?SetSize@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@@Z ENDP	; CMemoryStream::SetSize
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ?Seek@CMemoryStream@@UEAAJT_LARGE_INTEGER@@KPEAT_ULARGE_INTEGER@@@Z
_TEXT	SEGMENT
this$ = 8
dlibMove$ = 16
dwOrigin$ = 24
plibNewPosition$ = 32
?Seek@CMemoryStream@@UEAAJT_LARGE_INTEGER@@KPEAT_ULARGE_INTEGER@@@Z PROC ; CMemoryStream::Seek, COMDAT

; 238  :     HRESULT hr = S_OK;
; 239  :     TraceEnter();
; 240  : 
; 241  :     TraceOut("dlibMove=%Ld, dwOrigin=%d", dlibMove.QuadPart, dwOrigin);
; 242  : 
; 243  :     if (dlibMove.QuadPart > INT_MAX || dlibMove.QuadPart < INT_MIN)

  00000	b8 00 00 00 80	 mov	 eax, -2147483648	; ffffffff80000000H
  00005	41 bb ff ff ff
	ff		 mov	 r11d, -1		; ffffffffH
  0000b	45 33 d2	 xor	 r10d, r10d
  0000e	48 03 c2	 add	 rax, rdx
  00011	49 3b c3	 cmp	 rax, r11
  00014	77 6a		 ja	 SHORT $LN19@Seek

; 246  :     }
; 247  :     else
; 248  :     {
; 249  :         int nMove = (int)dlibMove.QuadPart;
; 250  :         TraceOut("nMove = %d", nMove);
; 251  :         int nNewPos = 0;
; 252  : 
; 253  :         switch (dwOrigin)

  00016	45 3b c2	 cmp	 r8d, r10d
  00019	74 4b		 je	 SHORT $LN14@Seek
  0001b	41 83 e8 01	 sub	 r8d, 1
  0001f	74 25		 je	 SHORT $LN10@Seek
  00021	41 83 f8 01	 cmp	 r8d, 1

; 309  : 
; 310  :             default:
; 311  :                 hr = STG_E_INVALIDFUNCTION;
; 312  :                 break;

  00025	75 59		 jne	 SHORT $LN19@Seek
  00027	44 8b 41 18	 mov	 r8d, DWORD PTR [rcx+24]
  0002b	41 8d 44 10 ff	 lea	 eax, DWORD PTR [r8+rdx-1]
  00030	41 3b c2	 cmp	 eax, r10d
  00033	7c 4b		 jl	 SHORT $LN19@Seek

; 290  : 
; 291  :             case STREAM_SEEK_END:
; 292  :                 nNewPos = m_nSize - 1 + nMove;
; 293  : 
; 294  :                 if (nNewPos >= 0 && nNewPos < m_nSize)

  00035	41 3b c0	 cmp	 eax, r8d
  00038	7d 46		 jge	 SHORT $LN19@Seek

; 295  :                 {
; 296  :                     m_nPos = nNewPos;

  0003a	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 297  : 
; 298  :                     if (NULL != plibNewPosition)

  0003d	4d 3b ca	 cmp	 r9, r10
  00040	74 44		 je	 SHORT $LN15@Seek

; 299  :                     {
; 300  :                         plibNewPosition->QuadPart = (__int64)m_nPos;

  00042	48 98		 cdqe

; 301  :                     }
; 302  :                 }
; 303  :                 else
; 304  :                 {
; 305  :                     hr = STG_E_INVALIDFUNCTION;
; 306  :                 }
; 307  : 
; 308  :                 break;                

  00044	eb 35		 jmp	 SHORT $LN26@Seek
$LN10@Seek:

; 266  :                 {
; 267  :                     hr = STG_E_INVALIDFUNCTION;
; 268  :                 }
; 269  : 
; 270  :                 break;
; 271  : 
; 272  :             case STREAM_SEEK_CUR:
; 273  :                 nNewPos = m_nPos + nMove;

  00046	8b 41 1c	 mov	 eax, DWORD PTR [rcx+28]
  00049	44 8d 04 02	 lea	 r8d, DWORD PTR [rdx+rax]

; 274  : 
; 275  :                 if (nNewPos >= 0 && nNewPos < m_nSize)

  0004d	45 3b c2	 cmp	 r8d, r10d
  00050	7c 2e		 jl	 SHORT $LN19@Seek
  00052	44 3b 41 18	 cmp	 r8d, DWORD PTR [rcx+24]
  00056	7d 28		 jge	 SHORT $LN19@Seek

; 276  :                 {
; 277  :                     m_nPos = nNewPos;

  00058	44 89 41 1c	 mov	 DWORD PTR [rcx+28], r8d

; 278  : 
; 279  :                     if (NULL != plibNewPosition)

  0005c	4d 3b ca	 cmp	 r9, r10
  0005f	74 25		 je	 SHORT $LN15@Seek

; 280  :                     {
; 281  :                         plibNewPosition->QuadPart = (__int64)m_nPos;

  00061	49 63 c0	 movsxd	 rax, r8d

; 282  :                     }
; 283  :                 }
; 284  :                 else
; 285  :                 {
; 286  :                     hr = STG_E_INVALIDFUNCTION;
; 287  :                 }
; 288  : 
; 289  :                 break;

  00064	eb 15		 jmp	 SHORT $LN26@Seek
$LN14@Seek:

; 254  :         {
; 255  :             case STREAM_SEEK_SET:
; 256  :                 if (nMove >= 0 && nMove < m_nSize)

  00066	41 3b d2	 cmp	 edx, r10d
  00069	7c 15		 jl	 SHORT $LN19@Seek
  0006b	3b 51 18	 cmp	 edx, DWORD PTR [rcx+24]
  0006e	7d 10		 jge	 SHORT $LN19@Seek

; 257  :                 {
; 258  :                     m_nPos = nMove;

  00070	89 51 1c	 mov	 DWORD PTR [rcx+28], edx

; 259  : 
; 260  :                     if (NULL != plibNewPosition)

  00073	4d 3b ca	 cmp	 r9, r10
  00076	74 0e		 je	 SHORT $LN15@Seek

; 261  :                     {
; 262  :                         plibNewPosition->QuadPart = (__int64)m_nPos;

  00078	48 63 c2	 movsxd	 rax, edx
$LN26@Seek:
  0007b	49 89 01	 mov	 QWORD PTR [r9], rax

; 263  :                     }
; 264  :                 }
; 265  :                 else

  0007e	eb 06		 jmp	 SHORT $LN15@Seek
$LN19@Seek:

; 244  :     {
; 245  :         hr = STG_E_INVALIDFUNCTION;

  00080	41 ba 01 00 03
	80		 mov	 r10d, -2147287039	; ffffffff80030001H
$LN15@Seek:

; 313  :         }
; 314  :     }
; 315  : 
; 316  :     TraceLeaveHr(hr);
; 317  :     return hr;

  00086	41 8b c2	 mov	 eax, r10d

; 318  : }

  00089	c3		 ret	 0
?Seek@CMemoryStream@@UEAAJT_LARGE_INTEGER@@KPEAT_ULARGE_INTEGER@@@Z ENDP ; CMemoryStream::Seek
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ?Revert@CMemoryStream@@UEAAJXZ
_TEXT	SEGMENT
this$ = 8
?Revert@CMemoryStream@@UEAAJXZ PROC			; CMemoryStream::Revert, COMDAT

; 228  :     HRESULT hr = S_OK;
; 229  :     TraceEnter();
; 230  :     TraceLeaveHr(hr);
; 231  :     return hr;

  00000	33 c0		 xor	 eax, eax

; 232  : }

  00002	c3		 ret	 0
?Revert@CMemoryStream@@UEAAJXZ ENDP			; CMemoryStream::Revert
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Write@CMemoryStream@@UEAAJPEBXKPEAK@Z DD imagerel $LN12
	DD	imagerel $LN12+148
	DD	imagerel $unwind$?Write@CMemoryStream@@UEAAJPEBXKPEAK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Write@CMemoryStream@@UEAAJPEBXKPEAK@Z DD 051819H
	DD	070058209H
	DD	050036004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	030H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT ?Write@CMemoryStream@@UEAAJPEBXKPEAK@Z
_TEXT	SEGMENT
st$ = 32
__$ArrayPad$ = 48
this$ = 112
pv$ = 120
cb$ = 128
pcbWritten$ = 136
?Write@CMemoryStream@@UEAAJPEBXKPEAK@Z PROC		; CMemoryStream::Write, COMDAT

; 184  : {

$LN12:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00018	49 8b f1	 mov	 rsi, r9
  0001b	41 8b e8	 mov	 ebp, r8d
  0001e	48 8b f9	 mov	 rdi, rcx

; 185  :     TraceEnter();
; 186  : 
; 187  :     if (NULL == pv)

  00021	48 85 d2	 test	 rdx, rdx
  00024	75 07		 jne	 SHORT $LN8@Write

; 188  :     {
; 189  :         return STG_E_INVALIDPOINTER;

  00026	b8 09 00 03 80	 mov	 eax, -2147287031	; ffffffff80030009H
  0002b	eb 51		 jmp	 SHORT $LN4@Write
$LN8@Write:

; 190  :     }
; 191  : 
; 192  :     TraceOut("pv=%p, cb=%u, pcbWritten=%p", pv, cb, pcbWritten);
; 193  : 
; 194  :     BYTE *pbEnd = m_pbBuffer + m_nSize;

  0002d	48 63 41 18	 movsxd	 rax, DWORD PTR [rcx+24]
  00031	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]

; 195  :     BYTE *pbReqStart = m_pbBuffer + m_nPos;

  00035	48 63 49 1c	 movsxd	 rcx, DWORD PTR [rcx+28]
  00039	48 03 4f 10	 add	 rcx, QWORD PTR [rdi+16]

; 196  :     BYTE *pbReqEnd = pbReqStart + cb;

  0003d	48 8d 1c 29	 lea	 rbx, QWORD PTR [rcx+rbp]

; 197  :     ULONG nBytesToSet = (ULONG)(min(pbEnd, pbReqEnd) - pbReqStart);

  00041	48 3b c3	 cmp	 rax, rbx
  00044	0f 42 d8	 cmovb	 ebx, eax
  00047	2b d9		 sub	 ebx, ecx

; 198  : 
; 199  :     memcpy(pbReqStart, pv, nBytesToSet);

  00049	44 8b c3	 mov	 r8d, ebx
  0004c	e8 00 00 00 00	 call	 memcpy

; 200  :    
; 201  :     if (NULL != pcbWritten)

  00051	48 85 f6	 test	 rsi, rsi
  00054	74 02		 je	 SHORT $LN6@Write

; 202  :     {
; 203  :         *pcbWritten = nBytesToSet;

  00056	89 1e		 mov	 DWORD PTR [rsi], ebx
$LN6@Write:

; 204  :     }
; 205  : 
; 206  :     m_nPos += nBytesToSet;

  00058	01 5f 1c	 add	 DWORD PTR [rdi+28], ebx

; 207  : 
; 208  :     TraceOut("m_nPos=%d", m_nPos);
; 209  : 
; 210  :     SYSTEMTIME st;
; 211  :     GetSystemTime(&st);

  0005b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR st$[rsp]
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 212  :     SystemTimeToFileTime(&st, &m_ftModified);

  00066	48 8d 57 28	 lea	 rdx, QWORD PTR [rdi+40]
  0006a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR st$[rsp]
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SystemTimeToFileTime

; 213  : 
; 214  :     if (nBytesToSet < cb)

  00075	3b dd		 cmp	 ebx, ebp
  00077	1b c0		 sbb	 eax, eax
  00079	25 70 00 03 80	 and	 eax, -2147286928	; ffffffff80030070H
$LN4@Write:

; 215  :     {
; 216  :         TraceLeaveHr(STG_E_MEDIUMFULL);
; 217  :         return STG_E_MEDIUMFULL;
; 218  :     }
; 219  :     else
; 220  :     {
; 221  :         TraceLeaveHr(S_OK);
; 222  :         return S_OK;
; 223  :     }
; 224  : }

  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00083	48 33 cc	 xor	 rcx, rsp
  00086	e8 00 00 00 00	 call	 __security_check_cookie
  0008b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008f	5f		 pop	 rdi
  00090	5e		 pop	 rsi
  00091	5d		 pop	 rbp
  00092	5b		 pop	 rbx
  00093	c3		 ret	 0
?Write@CMemoryStream@@UEAAJPEBXKPEAK@Z ENDP		; CMemoryStream::Write
_TEXT	ENDS
PUBLIC	__$ArrayPad$
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Read@CMemoryStream@@UEAAJPEAXKPEAK@Z DD imagerel $LN10
	DD	imagerel $LN10+160
	DD	imagerel $unwind$?Read@CMemoryStream@@UEAAJPEAXKPEAK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Read@CMemoryStream@@UEAAJPEAXKPEAK@Z DD 041719H
	DD	070047208H
	DD	030026003H
	DD	imagerel __GSHandlerCheck
	DD	030H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT ?Read@CMemoryStream@@UEAAJPEAXKPEAK@Z
_TEXT	SEGMENT
st$ = 32
__$ArrayPad$ = 48
this$ = 96
pv$ = 104
cb$ = 112
pcbRead$ = 120
?Read@CMemoryStream@@UEAAJPEAXKPEAK@Z PROC		; CMemoryStream::Read, COMDAT

; 146  : {

$LN10:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00008	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000f	48 33 c4	 xor	 rax, rsp
  00012	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00017	49 8b f1	 mov	 rsi, r9
  0001a	4c 8b d2	 mov	 r10, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 147  :     TraceEnter();
; 148  : 
; 149  :     if (NULL == pv)

  00020	48 85 d2	 test	 rdx, rdx
  00023	75 07		 jne	 SHORT $LN6@Read

; 150  :     {
; 151  :         TraceLeaveHr(STG_E_INVALIDPOINTER);
; 152  :         return STG_E_INVALIDPOINTER;

  00025	b8 09 00 03 80	 mov	 eax, -2147287031	; ffffffff80030009H
  0002a	eb 5f		 jmp	 SHORT $LN8@Read
$LN6@Read:

; 153  :     }
; 154  : 
; 155  :     TraceOut("pv=%p, cb=%u, pcbRead=%p, m_nPos=%d", pv, cb, pcbRead, m_nPos);
; 156  : 
; 157  :     BYTE *pbEnd = m_pbBuffer + m_nSize;
; 158  :     BYTE *pbReqStart = m_pbBuffer + m_nPos;

  0002c	48 63 51 1c	 movsxd	 rdx, DWORD PTR [rcx+28]
  00030	4c 63 49 18	 movsxd	 r9, DWORD PTR [rcx+24]

; 159  :     BYTE *pbReqEnd = pbReqStart + cb;

  00034	41 8b f8	 mov	 edi, r8d
  00037	48 03 51 10	 add	 rdx, QWORD PTR [rcx+16]
  0003b	4c 03 49 10	 add	 r9, QWORD PTR [rcx+16]

; 160  :     ULONG nBytesToGet = (ULONG)(min(pbEnd - pbReqStart, pbReqEnd - pbReqStart));
; 161  : 
; 162  :     memcpy(pv, pbReqStart, nBytesToGet);

  0003f	49 8b ca	 mov	 rcx, r10
  00042	48 03 fa	 add	 rdi, rdx
  00045	49 8b c1	 mov	 rax, r9
  00048	44 2b ca	 sub	 r9d, edx
  0004b	4c 8b c7	 mov	 r8, rdi
  0004e	2b fa		 sub	 edi, edx
  00050	48 2b c2	 sub	 rax, rdx
  00053	4c 2b c2	 sub	 r8, rdx
  00056	49 3b c0	 cmp	 rax, r8
  00059	41 0f 4c f9	 cmovl	 edi, r9d
  0005d	44 8b c7	 mov	 r8d, edi
  00060	e8 00 00 00 00	 call	 memcpy

; 163  :    
; 164  :     if (NULL != pcbRead)

  00065	48 85 f6	 test	 rsi, rsi
  00068	74 02		 je	 SHORT $LN3@Read

; 165  :     {
; 166  :         *pcbRead = nBytesToGet;

  0006a	89 3e		 mov	 DWORD PTR [rsi], edi
$LN3@Read:

; 167  :     }
; 168  : 
; 169  :     m_nPos += nBytesToGet;

  0006c	01 7b 1c	 add	 DWORD PTR [rbx+28], edi

; 170  : 
; 171  :     TraceOut("m_nPos=%d", m_nPos);
; 172  : 
; 173  :     SYSTEMTIME st;
; 174  :     GetSystemTime(&st);

  0006f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR st$[rsp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 175  :     SystemTimeToFileTime(&st, &m_ftAccessed);

  0007a	48 8d 53 30	 lea	 rdx, QWORD PTR [rbx+48]
  0007e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR st$[rsp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SystemTimeToFileTime

; 176  : 
; 177  :     TraceLeaveHr(S_OK);
; 178  :     return S_OK;

  00089	33 c0		 xor	 eax, eax
$LN8@Read:

; 179  : }

  0008b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00090	48 33 cc	 xor	 rcx, rsp
  00093	e8 00 00 00 00	 call	 __security_check_cookie
  00098	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009c	5f		 pop	 rdi
  0009d	5e		 pop	 rsi
  0009e	5b		 pop	 rbx
  0009f	c3		 ret	 0
?Read@CMemoryStream@@UEAAJPEAXKPEAK@Z ENDP		; CMemoryStream::Read
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ?LockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z
_TEXT	SEGMENT
this$ = 8
libOffset$ = 16
cb$ = 24
dwLockType$ = 32
?LockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z PROC ; CMemoryStream::LockRegion, COMDAT

; 137  :     HRESULT hr = E_NOTIMPL;
; 138  :     TraceEnter();
; 139  :     TraceLeaveHr(hr);
; 140  :     return hr;

  00000	b8 01 40 00 80	 mov	 eax, -2147467263	; ffffffff80004001H

; 141  : }

  00005	c3		 ret	 0
?LockRegion@CMemoryStream@@UEAAJT_ULARGE_INTEGER@@0K@Z ENDP ; CMemoryStream::LockRegion
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ?CopyTo@CMemoryStream@@UEAAJPEAUIStream@@T_ULARGE_INTEGER@@PEAT3@2@Z
_TEXT	SEGMENT
this$ = 8
pstm$ = 16
cb$ = 24
pcbRead$ = 32
pcbWritten$ = 40
?CopyTo@CMemoryStream@@UEAAJPEAUIStream@@T_ULARGE_INTEGER@@PEAT3@2@Z PROC ; CMemoryStream::CopyTo, COMDAT

; 127  :     HRESULT hr = E_NOTIMPL;
; 128  :     TraceEnter();
; 129  :     TraceLeaveHr(hr);
; 130  :     return hr;

  00000	b8 01 40 00 80	 mov	 eax, -2147467263	; ffffffff80004001H

; 131  : }

  00005	c3		 ret	 0
?CopyTo@CMemoryStream@@UEAAJPEAUIStream@@T_ULARGE_INTEGER@@PEAT3@2@Z ENDP ; CMemoryStream::CopyTo
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ?Commit@CMemoryStream@@UEAAJK@Z
_TEXT	SEGMENT
this$ = 8
grfCommitFlags$ = 16
?Commit@CMemoryStream@@UEAAJK@Z PROC			; CMemoryStream::Commit, COMDAT

; 116  :     HRESULT hr = S_OK;
; 117  :     TraceEnter();
; 118  :     TraceLeaveHr(hr);
; 119  :     return hr;

  00000	33 c0		 xor	 eax, eax

; 120  : }

  00002	c3		 ret	 0
?Commit@CMemoryStream@@UEAAJK@Z ENDP			; CMemoryStream::Commit
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ?AddRef@CMemoryStream@@UEAAKXZ
_TEXT	SEGMENT
this$ = 8
?AddRef@CMemoryStream@@UEAAKXZ PROC			; CMemoryStream::AddRef, COMDAT

; 62   :     TraceEnter();
; 63   :     return InterlockedIncrement(&m_lRefCount);

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	f0 0f c1 41 08	 lock xadd DWORD PTR [rcx+8], eax
  0000a	ff c0		 inc	 eax

; 64   : }

  0000c	c3		 ret	 0
?AddRef@CMemoryStream@@UEAAKXZ ENDP			; CMemoryStream::AddRef
_TEXT	ENDS
PUBLIC	??1CMemoryStream@@QEAA@XZ			; CMemoryStream::~CMemoryStream
; Function compile flags: /Ogspy
;	COMDAT ??1CMemoryStream@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1CMemoryStream@@QEAA@XZ PROC				; CMemoryStream::~CMemoryStream, COMDAT

; 33   : {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7CMemoryStream@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 34   : }

  0000a	c3		 ret	 0
??1CMemoryStream@@QEAA@XZ ENDP				; CMemoryStream::~CMemoryStream
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GCMemoryStream@@QEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+33
	DD	imagerel $unwind$??_GCMemoryStream@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GCMemoryStream@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT ??_GCMemoryStream@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GCMemoryStream@@QEAAPEAXI@Z PROC			; CMemoryStream::`scalar deleting destructor', COMDAT
$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7CMemoryStream@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 01	 mov	 QWORD PTR [rcx], rax
  00013	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
  00018	48 8b c3	 mov	 rax, rbx
  0001b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001f	5b		 pop	 rbx
  00020	c3		 ret	 0
??_GCMemoryStream@@QEAAPEAXI@Z ENDP			; CMemoryStream::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Release@CMemoryStream@@UEAAKXZ DD imagerel $LN12
	DD	imagerel $LN12+47
	DD	imagerel $unwind$?Release@CMemoryStream@@UEAAKXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Release@CMemoryStream@@UEAAKXZ DD 020601H
	DD	030023206H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT ?Release@CMemoryStream@@UEAAKXZ
_TEXT	SEGMENT
this$ = 48
?Release@CMemoryStream@@UEAAKXZ PROC			; CMemoryStream::Release, COMDAT

; 67   : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 68   :     TraceEnter();
; 69   :     DWORD dwNewRefCount = InterlockedDecrement(&m_lRefCount);

  00006	83 cb ff	 or	 ebx, -1
  00009	f0 0f c1 59 08	 lock xadd DWORD PTR [rcx+8], ebx
  0000e	83 c3 ff	 add	 ebx, -1

; 70   : 
; 71   :     if (0 == dwNewRefCount)

  00011	75 14		 jne	 SHORT $LN5@Release@2

; 72   :     {
; 73   :         delete this;

  00013	48 85 c9	 test	 rcx, rcx
  00016	74 0f		 je	 SHORT $LN5@Release@2
  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7CMemoryStream@@6B@
  0001f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00022	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN5@Release@2:

; 74   :     }
; 75   : 
; 76   :     return dwNewRefCount;

  00027	8b c3		 mov	 eax, ebx

; 77   : }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
?Release@CMemoryStream@@UEAAKXZ ENDP			; CMemoryStream::Release
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files\microsoft sdks\windows\v6.0a\include\guiddef.h
pdata	SEGMENT
$pdata$?QueryInterface@CMemoryStream@@UEAAJAEBU_GUID@@PEAPEAX@Z DD imagerel $LN12
	DD	imagerel $LN12+98
	DD	imagerel $unwind$?QueryInterface@CMemoryStream@@UEAAJAEBU_GUID@@PEAPEAX@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?QueryInterface@CMemoryStream@@UEAAJAEBU_GUID@@PEAPEAX@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogspy
; File e:\my_project\openpdn\openpdn-e28f1ff0077e\src\shellextension\memorystream.cpp
xdata	ENDS
;	COMDAT ?QueryInterface@CMemoryStream@@UEAAJAEBU_GUID@@PEAPEAX@Z
_TEXT	SEGMENT
this$ = 48
iid$ = 56
ppvObject$ = 64
?QueryInterface@CMemoryStream@@UEAAJAEBU_GUID@@PEAPEAX@Z PROC ; CMemoryStream::QueryInterface, COMDAT

; 38   : {

$LN12:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	49 8b f8	 mov	 rdi, r8
  0000d	48 8b d9	 mov	 rbx, rcx

; 39   :     TraceEnter();
; 40   : 
; 41   :     TraceOut("%S", GuidToString(iid));
; 42   : 
; 43   :     if (NULL == ppvObject)

  00010	4d 85 c0	 test	 r8, r8
  00013	75 07		 jne	 SHORT $LN3@QueryInter@2

; 44   :     {
; 45   :         return E_INVALIDARG;

  00015	b8 57 00 07 80	 mov	 eax, -2147024809	; ffffffff80070057H
  0001a	eb 3b		 jmp	 SHORT $LN1@QueryInter@2
$LN3@QueryInter@2:

; 46   :     }
; 47   : 
; 48   :     if (IsEqualCLSID(iid, IID_IStream))

  0001c	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:IID_IStream
  00026	48 3b 08	 cmp	 rcx, QWORD PTR [rax]
  00029	75 0e		 jne	 SHORT $LN10@QueryInter@2
  0002b	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0002f	48 3b 48 08	 cmp	 rcx, QWORD PTR [rax+8]
  00033	75 04		 jne	 SHORT $LN10@QueryInter@2
  00035	33 c0		 xor	 eax, eax
  00037	eb 05		 jmp	 SHORT $LN11@QueryInter@2
$LN10@QueryInter@2:
  00039	1b c0		 sbb	 eax, eax
  0003b	83 d8 ff	 sbb	 eax, -1
$LN11@QueryInter@2:
  0003e	85 c0		 test	 eax, eax
  00040	75 10		 jne	 SHORT $LN2@QueryInter@2

; 49   :     {
; 50   :         AddRef();

  00042	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00045	48 8b cb	 mov	 rcx, rbx
  00048	ff 50 08	 call	 QWORD PTR [rax+8]

; 51   :         *ppvObject = this;

  0004b	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 52   :         return S_OK;

  0004e	33 c0		 xor	 eax, eax
  00050	eb 05		 jmp	 SHORT $LN1@QueryInter@2
$LN2@QueryInter@2:

; 53   :     }
; 54   :     else
; 55   :     {
; 56   :         return E_NOINTERFACE;

  00052	b8 02 40 00 80	 mov	 eax, -2147467262	; ffffffff80004002H
$LN1@QueryInter@2:

; 57   :     }
; 58   : }

  00057	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5f		 pop	 rdi
  00061	c3		 ret	 0
?QueryInterface@CMemoryStream@@UEAAJAEBU_GUID@@PEAPEAX@Z ENDP ; CMemoryStream::QueryInterface
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ??0ISequentialStream@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0ISequentialStream@@QEAA@XZ PROC			; ISequentialStream::ISequentialStream, COMDAT
  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0ISequentialStream@@QEAA@XZ ENDP			; ISequentialStream::ISequentialStream
; Function compile flags: /Ogspy
_TEXT	ENDS
;	COMDAT ??0IStream@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0IStream@@QEAA@XZ PROC				; IStream::IStream, COMDAT
  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0IStream@@QEAA@XZ ENDP				; IStream::IStream
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	??0CMemoryStream@@QEAA@PEAEH@Z			; CMemoryStream::CMemoryStream
;	COMDAT pdata
; File e:\my_project\openpdn\openpdn-e28f1ff0077e\src\shellextension\classfactory.cpp
pdata	SEGMENT
$pdata$??0CMemoryStream@@QEAA@PEAEH@Z DD imagerel $LN12
	DD	imagerel $LN12+131
	DD	imagerel $unwind$??0CMemoryStream@@QEAA@PEAEH@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CMemoryStream@@QEAA@PEAEH@Z DD 021519H
	DD	030027206H
	DD	imagerel __GSHandlerCheck
	DD	030H
; Function compile flags: /Ogspy
; File e:\my_project\openpdn\openpdn-e28f1ff0077e\src\shellextension\memorystream.cpp
xdata	ENDS
;	COMDAT ??0CMemoryStream@@QEAA@PEAEH@Z
_TEXT	SEGMENT
st$ = 32
__$ArrayPad$ = 48
this$ = 80
pbBuffer$ = 88
nSize$ = 96
??0CMemoryStream@@QEAA@PEAEH@Z PROC			; CMemoryStream::CMemoryStream, COMDAT

; 19   : {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00015	83 61 1c 00	 and	 DWORD PTR [rcx+28], 0
  00019	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx
  0001d	44 89 41 18	 mov	 DWORD PTR [rcx+24], r8d
  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7CMemoryStream@@6B@
  00028	48 8b d9	 mov	 rbx, rcx
  0002b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 20   :     TraceEnter();
; 21   :     TraceOut("m_nSize=%d", m_nSize);
; 22   :     m_lRefCount = 1;

  0002e	c7 41 08 01 00
	00 00		 mov	 DWORD PTR [rcx+8], 1

; 23   : 
; 24   :     SYSTEMTIME st;
; 25   :     GetSystemTime(&st);

  00035	48 8d 4c 24 20	 lea	 rcx, QWORD PTR st$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 26   :     SystemTimeToFileTime(&st, &m_ftCreation);

  00040	48 8d 53 20	 lea	 rdx, QWORD PTR [rbx+32]
  00044	48 8d 4c 24 20	 lea	 rcx, QWORD PTR st$[rsp]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SystemTimeToFileTime

; 27   :     SystemTimeToFileTime(&st, &m_ftModified);

  0004f	48 8d 53 28	 lea	 rdx, QWORD PTR [rbx+40]
  00053	48 8d 4c 24 20	 lea	 rcx, QWORD PTR st$[rsp]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SystemTimeToFileTime

; 28   :     SystemTimeToFileTime(&st, &m_ftAccessed);

  0005e	48 8d 53 30	 lea	 rdx, QWORD PTR [rbx+48]
  00062	48 8d 4c 24 20	 lea	 rcx, QWORD PTR st$[rsp]
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SystemTimeToFileTime

; 29   :     TraceLeave();
; 30   : }

  0006d	48 8b c3	 mov	 rax, rbx
  00070	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00075	48 33 cc	 xor	 rcx, rsp
  00078	e8 00 00 00 00	 call	 __security_check_cookie
  0007d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00081	5b		 pop	 rbx
  00082	c3		 ret	 0
??0CMemoryStream@@QEAA@PEAEH@Z ENDP			; CMemoryStream::CMemoryStream
PUBLIC	__$ArrayPad$
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clone@CMemoryStream@@UEAAJPEAPEAUIStream@@@Z DD imagerel $LN11
	DD	imagerel $LN11+165
	DD	imagerel $unwind$?Clone@CMemoryStream@@UEAAJPEAPEAUIStream@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clone@CMemoryStream@@UEAAJPEAPEAUIStream@@@Z DD 061e19H
	DD	0b640fH
	DD	0a340fH
	DD	0700b520fH
	DD	imagerel __GSHandlerCheck
	DD	028H
; Function compile flags: /Ogspy
xdata	ENDS
;	COMDAT ?Clone@CMemoryStream@@UEAAJPEAPEAUIStream@@@Z
_TEXT	SEGMENT
dlibNewPosition$ = 32
__$ArrayPad$ = 40
this$ = 64
ppstm$ = 72
?Clone@CMemoryStream@@UEAAJPEAPEAUIStream@@@Z PROC	; CMemoryStream::Clone, COMDAT

; 81   : {

$LN11:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 44 24 28	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001e	48 8b fa	 mov	 rdi, rdx
  00021	48 8b f1	 mov	 rsi, rcx

; 82   :     TraceEnter();
; 83   :     if (NULL == ppstm)

  00024	48 85 d2	 test	 rdx, rdx
  00027	75 07		 jne	 SHORT $LN4@Clone@4
$LN10@Clone@4:

; 84   :     {
; 85   :         return E_INVALIDARG;

  00029	b8 57 00 07 80	 mov	 eax, -2147024809	; ffffffff80070057H
  0002e	eb 58		 jmp	 SHORT $LN1@Clone@4
$LN4@Clone@4:

; 86   :     }
; 87   : 
; 88   :     CMemoryStream *pMemoryStream = new CMemoryStream(m_pbBuffer, m_nSize);

  00030	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00035	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0003a	48 85 c0	 test	 rax, rax
  0003d	74 15		 je	 SHORT $LN8@Clone@4
  0003f	44 8b 46 18	 mov	 r8d, DWORD PTR [rsi+24]
  00043	48 8b 56 10	 mov	 rdx, QWORD PTR [rsi+16]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ??0CMemoryStream@@QEAA@PEAEH@Z ; CMemoryStream::CMemoryStream
  0004f	48 8b d8	 mov	 rbx, rax
  00052	eb 02		 jmp	 SHORT $LN9@Clone@4
$LN8@Clone@4:
  00054	33 db		 xor	 ebx, ebx
$LN9@Clone@4:

; 89   : 
; 90   :     if (NULL == pMemoryStream)

  00056	48 85 db	 test	 rbx, rbx

; 91   :     {
; 92   :         return E_INVALIDARG;

  00059	74 ce		 je	 SHORT $LN10@Clone@4

; 93   :     }
; 94   :     
; 95   :     LARGE_INTEGER dlibMove;
; 96   :     dlibMove.QuadPart = m_nPos;
; 97   :     DWORD dwOrigin = STREAM_SEEK_SET;
; 98   :     ULARGE_INTEGER dlibNewPosition;
; 99   : 
; 100  :     HRESULT hr = pMemoryStream->Seek(dlibMove, dwOrigin, &dlibNewPosition);

  0005b	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0005e	48 63 56 1c	 movsxd	 rdx, DWORD PTR [rsi+28]
  00062	4c 8d 4c 24 20	 lea	 r9, QWORD PTR dlibNewPosition$[rsp]
  00067	45 33 c0	 xor	 r8d, r8d
  0006a	48 8b cb	 mov	 rcx, rbx
  0006d	ff 50 28	 call	 QWORD PTR [rax+40]
  00070	8b f0		 mov	 esi, eax

; 101  : 
; 102  :     if (FAILED(hr))

  00072	85 c0		 test	 eax, eax
  00074	79 0d		 jns	 SHORT $LN2@Clone@4

; 103  :     {
; 104  :         pMemoryStream->Release();

  00076	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00079	48 8b cb	 mov	 rcx, rbx
  0007c	ff 52 10	 call	 QWORD PTR [rdx+16]

; 105  :         return hr;

  0007f	8b c6		 mov	 eax, esi
  00081	eb 05		 jmp	 SHORT $LN1@Clone@4
$LN2@Clone@4:

; 106  :     }
; 107  :     else
; 108  :     {
; 109  :         *ppstm = (IStream *)pMemoryStream;

  00083	48 89 1f	 mov	 QWORD PTR [rdi], rbx

; 110  :         return S_OK;

  00086	33 c0		 xor	 eax, eax
$LN1@Clone@4:

; 111  :     }
; 112  : }

  00088	48 8b 4c 24 28	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008d	48 33 cc	 xor	 rcx, rsp
  00090	e8 00 00 00 00	 call	 __security_check_cookie
  00095	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0009a	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0009f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a3	5f		 pop	 rdi
  000a4	c3		 ret	 0
?Clone@CMemoryStream@@UEAAJPEAPEAUIStream@@@Z ENDP	; CMemoryStream::Clone
END
